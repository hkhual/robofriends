{"version":3,"sources":["components/Scroll.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/ErrorBoundary.js","components/Footer.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Scroll","props","react_default","a","createElement","style","overflow","border","height","children","Card","name","email","id","className","alt","src","concat","CardList","_ref","robots","cardArrays","map","user","i","components_Card","key","SearchBox","searchChange","type","placeholder","onChange","ErrorBoundary","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","Footer","App","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","components_SearchBox","components_Scroll","components_ErrorBoundary","components_CardList","components_Footer","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","intialStateSearch","intialStateRobots","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.395c0d12.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Scroll = (props) =>{\r\n  return(\r\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n\r\n}\r\n\r\nexport default Scroll;\r\n","import React from 'react';\r\n\r\nconst Card = (props) => {\r\n  //desctructure\r\n  const{ name, email, id } = props;\r\n  return(\r\n        <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n            <img alt=\"robots\" src={`https://robohash.org/${id}?200x200`} />\r\n            <div>\r\n              <h2>{name}</h2>\r\n              <p>{email}</p>\r\n            </div>\r\n        </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n\r\n    // if(true){\r\n    //   throw new Error('Noo');\r\n    // }\r\n\r\n    const cardArrays = robots.map((user, i) => {\r\n      return(\r\n        <Card\r\n          key={i}\r\n          id={robots[i].id}\r\n          name={robots[i].name}\r\n          email={robots[i].email}\r\n        />\r\n        );\r\n    })\r\n\r\n  return(\r\n    <div>\r\n      {cardArrays}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;\r\n","\r\nimport React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n  return(\r\n    <div className=\"pa2\">\r\n        <input\r\n          className=\"pa3 ba b--green bg-lightest-blue\"\r\n          type=\"search\"\r\n          placeholder=\"search robots\"\r\n          onChange={searchChange}\r\n        />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;\r\n","\r\nimport React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      hasError: false\r\n    }\r\n  }\r\n\r\n//\r\ncomponentDidCatch(error, info){\r\n  this.setState({hasError: true});\r\n}\r\n\r\n\r\n  render(){\r\n    if(this.state.hasError){\r\n      return <h1>Something went wrong</h1>\r\n    }\r\n    return this.props.children\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React from 'react';\r\n\r\nconst Footer = () =>{\r\n\r\n  return(\r\n    <div className=\"pv4 ph3 ph5-ns tc white bg\">\r\n      <p>Copyright &#xA9; 2019</p>\r\n      <small>Robofriends. All rights reserved.</small>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React, { Component } from 'react';\r\n\r\nimport './App.css';\r\nimport Scroll from '../components/Scroll';\r\n\r\nimport CardList from '../components/CardList';\r\n/*If file is export default then\r\nyou can import by its file name*/\r\n/*If file only has export syntax\r\n  then the file can have mutipulte export\r\n  then it must wrap inside curely bracket\r\n  or desctructure it {robots }\r\n*/\r\n\r\nimport SearchBox from '../components/SearchBox'\r\n\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\n\r\nimport Footer from '../components/Footer';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nimport { setSearchField, requestRobots } from '../actions';\r\n\r\n\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return{\r\n  onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n  onRequestRobots: () => dispatch(requestRobots())\r\n\r\n\r\n  }\r\n}\r\n\r\n\r\nclass App extends Component{\r\n\r\n\r\n  componentDidMount(){\r\n    this.props.onRequestRobots();\r\n  }\r\n\r\n\r\n  render(){\r\n    const { searchField, robots, onSearchChange, isPending } = this.props;\r\n    const filteredRobots = robots.filter(robot =>{\r\n      return robot.name.toLowerCase().includes( searchField.toLowerCase());\r\n    })\r\n\r\n    return isPending ?\r\n      <h1>Loading</h1> :\r\n\r\n      (\r\n          <div className=\"tc\">\r\n            <h1 className=\"f2\">Robofriends</h1>\r\n            <SearchBox searchChange={onSearchChange}/>\r\n              <Scroll>\r\n                <ErrorBoundary>\r\n                    <CardList robots={filteredRobots}/>\r\n                </ErrorBoundary>\r\n              </Scroll>\r\n              <Footer />\r\n          </div>\r\n        );\r\n\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_FAILED} from './constants.js';\r\n\r\nexport const setSearchField = (text) =>({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then( response => response.json())\r\n      .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n      .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n}\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING  = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\nCHANGE_SEARCH_FIELD,\r\nREQUEST_ROBOTS_SUCCESS,\r\nREQUEST_ROBOTS_PENDING,\r\nREQUEST_ROBOTS_FAILED } from './constants.js';\r\n\r\n\r\nconst intialStateSearch = {\r\n  searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=intialStateSearch, action={}) =>{\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return Object.assign({}, state, {searchField: action.payload})\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n\r\nconst intialStateRobots = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: ''\r\n}\r\n\r\nexport const requestRobots = (state=intialStateRobots, action={}) => {\r\n  switch(action.type){\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return Object.assign({}, state, { isPending: true})\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return Object.assign({}, state, {robots: action.payload, isPending: false})\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return Object.assign({}, state, { error: action.payload, isPending: false})\r\n    default:\r\n      return state;\r\n\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({searchRobots, requestRobots})\n\nconst store =\ncreateStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\nReactDOM.render(\n  <Provider store={store}>\n    <App/>\n  </Provider>, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
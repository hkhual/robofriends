{"version":3,"sources":["../../../robofriends/src/components/Scroll.js","../../../robofriends/src/components/Card.js","../../../robofriends/src/components/CardList.js","../../../robofriends/src/components/SearchBox.js","../../../robofriends/src/components/ErrorBoundary.js","../../../robofriends/src/containers/App.js","../../../robofriends/src/serviceWorker.js","../../../robofriends/src/index.js"],"names":["Scroll","props","react_default","a","createElement","style","overflow","border","height","children","Card","name","email","id","className","alt","src","concat","CardList","_ref","robots","cardArrays","map","user","i","components_Card","key","SearchBox","searchChange","type","placeholder","onChange","ErrorBoundary","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","App","onSearchChange","event","searchfield","target","value","_this2","fetch","then","response","json","users","_this$state","filteredRobots","filter","robot","toLowerCase","includes","length","components_SearchBox","components_Scroll","components_ErrorBoundary","components_CardList","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b03723a8.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Scroll = (props) =>{\r\n  return(\r\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n\r\n}\r\n\r\nexport default Scroll;\r\n","import React from 'react';\r\n\r\nconst Card = (props) => {\r\n  //desctructure\r\n  const{ name, email, id } = props;\r\n  return(\r\n        <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n            <img alt=\"robots\" src={`https://robohash.org/${id}?200x200`} />\r\n            <div>\r\n              <h2>{name}</h2>\r\n              <p>{email}</p>\r\n            </div>\r\n        </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n\r\n    // if(true){\r\n    //   throw new Error('Noo');\r\n    // }\r\n\r\n    const cardArrays = robots.map((user, i) => {\r\n      return(\r\n        <Card\r\n          key={i}\r\n          id={robots[i].id}\r\n          name={robots[i].name}\r\n          email={robots[i].email}\r\n        />\r\n        );\r\n    })\r\n\r\n  return(\r\n    <div>\r\n      {cardArrays}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;\r\n","\r\nimport React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n  return(\r\n    <div className=\"pa2\">\r\n        <input\r\n          className=\"pa3 ba b--green bg-lightest-blue\"\r\n          type=\"search\"\r\n          placeholder=\"search robots\"\r\n          onChange={searchChange}\r\n        />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;\r\n","\r\nimport React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      hasError: false\r\n    }\r\n  }\r\n\r\n//\r\ncomponentDidCatch(error, info){\r\n  this.setState({hasError: true});\r\n}\r\n\r\n\r\n  render(){\r\n    if(this.state.hasError){\r\n      return <h1>Something went wrong</h1>\r\n    }\r\n    return this.props.children\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React, { Component } from 'react';\r\n\r\nimport './App.css';\r\nimport Scroll from '../components/Scroll';\r\n\r\nimport CardList from '../components/CardList';\r\n/*If file is export default then\r\nyou can import by its file name*/\r\n/*If file only has export syntax\r\n  then the file can have mutipulte export\r\n  then it must wrap inside curely bracket\r\n  or desctructure it {robots }\r\n*/\r\n\r\nimport SearchBox from '../components/SearchBox'\r\n\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\n\r\nclass App extends Component{\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      robots: [],\r\n      searchfield: \"\"\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then( response => response.json())\r\n      .then(users => this.setState({ robots: users}));\r\n  }\r\n\r\nonSearchChange = (event) =>{\r\n  this.setState({searchfield: event.target.value})\r\n}\r\n\r\n  render(){\r\n    const { robots, searchfield } = this.state;\r\n    const filteredRobots = robots.filter(robot =>{\r\n      return robot.name.toLowerCase().includes( searchfield.toLowerCase());\r\n    })\r\n\r\n    if(!robots.length){\r\n      return <h1>Loading</h1>\r\n    } else{\r\n        return(\r\n          <div className=\"tc\">\r\n            <h1 className=\"f2\">Robofriends</h1>\r\n            <SearchBox searchChange={this.onSearchChange}/>\r\n              <Scroll>\r\n                <ErrorBoundary>\r\n                    <CardList robots={filteredRobots}/>\r\n                </ErrorBoundary>\r\n              </Scroll>\r\n          </div>\r\n        );\r\n    }\r\n\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}